--
-- Test compatibility in CBDB singlenode mode.
--
-- In singlenode mode, certain clauses such as scatter by and
-- distributed by become meaningless, but for the sake of
-- compatibility, we retain the grammar and treat them as ignored.
-- This file aims to verify the correct functionality of all these
-- SQL statements.
-- test ignorance of `distributed by`
create table l (i int, j int) distributed by (i);
WARNING:  DISTRIBUTED BY clause has no effect in singlenode mode
create table r (i int, j int) distributed by (j);
WARNING:  DISTRIBUTED BY clause has no effect in singlenode mode
insert into l select i % 7, i % 13 from generate_series(1, 1000) i;
insert into r select i % 13, i % 7 from generate_series(1, 1000) i;
explain select count(*) from l;
                         QUERY PLAN                         
------------------------------------------------------------
 Aggregate  (cost=123.62..123.64 rows=1 width=8)
   ->  Seq Scan on l  (cost=0.00..100.90 rows=9090 width=0)
 Optimizer: Postgres query optimizer
(3 rows)

select count(*) from l;
 count 
-------
  1000
(1 row)

explain select count(*) from l, r where l.i = r.i;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Aggregate  (cost=11699.51..11699.52 rows=1 width=8)
   ->  Hash Join  (cost=214.53..11492.94 rows=82628 width=0)
         Hash Cond: (l.i = r.i)
         ->  Seq Scan on l  (cost=0.00..100.90 rows=9090 width=4)
         ->  Hash  (cost=100.90..100.90 rows=9090 width=4)
               ->  Seq Scan on r  (cost=0.00..100.90 rows=9090 width=4)
 Optimizer: Postgres query optimizer
(7 rows)

select count(*) from l, r where l.i = r.i;
 count 
-------
 76858
(1 row)

alter table l set distributed by (j);
ERROR:  SET DISTRIBUTED BY not supported in utility mode
create table ao1(x int, y int) with(appendonly=true) distributed by (x);
WARNING:  DISTRIBUTED BY clause has no effect in singlenode mode
create table aocs1(x int, y int) with(appendonly=true, orientation=column) distributed by (x);
WARNING:  DISTRIBUTED BY clause has no effect in singlenode mode
insert into ao1 select i, i from generate_series(1, 1200000) g(i);
analyze ao1;
insert into aocs1 select i, i from generate_series(1, 1200000) g(i);
analyze aocs1;
explain(costs off) select count(*) from ao1;
             QUERY PLAN              
-------------------------------------
 Aggregate
   ->  Seq Scan on ao1
 Optimizer: Postgres query optimizer
(3 rows)

select count(*) from ao1;
  count  
---------
 1200000
(1 row)

explain(costs off) select count(*) from aocs1;
             QUERY PLAN              
-------------------------------------
 Aggregate
   ->  Seq Scan on aocs1
 Optimizer: Postgres query optimizer
(3 rows)

select count(*) from aocs1;
  count  
---------
 1200000
(1 row)

-- test ignorance of `scatter by`
CREATE TABLE example(a int, b text) DISTRIBUTED by (a);
WARNING:  DISTRIBUTED BY clause has no effect in singlenode mode
COPY example FROM stdin;
CREATE FUNCTION multiset_func(a anytable) RETURNS SETOF example
    AS '@abs_srcdir@/regress.so', 'multiset_example' LANGUAGE C READS SQL DATA;
explain SELECT * FROM multiset_func( TABLE( SELECT * FROM example ORDER BY a, b SCATTER by a) )  order by a, b;
WARNING:  SCATTER BY clause has no effect in singlenode mode
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=754.48..767.26 rows=5110 width=36)
   Sort Key: a, b
   ->  Table Function Scan on multiset_func  (cost=375.85..439.73 rows=5110 width=36)
         ->  Sort  (cost=375.85..388.63 rows=5110 width=36)
               Sort Key: example.a, example.b
               ->  Seq Scan on example  (cost=0.00..61.10 rows=5110 width=36)
 Optimizer: Postgres query optimizer
(7 rows)

SELECT * FROM multiset_func( TABLE( SELECT * FROM example ORDER BY a, b SCATTER by a) )  order by a, b;
WARNING:  SCATTER BY clause has no effect in singlenode mode
 a |      b      
---+-------------
 1 |  value1.1/4
 1 |  value1.2/4
 1 |  value1.3/4
 1 |  value1.4/4
 2 |  value2.1/3
 2 |  value2.2/3
 2 |  value2.3/3
 3 |  value3.1/2
 3 |  value3.2/2
 4 |  value4.1/1
(10 rows)

drop table l;
drop table r;
drop table ao1;
drop table aocs1;
drop function multiset_func;
drop table example;
